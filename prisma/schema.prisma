// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Course {
    id        String   @id @default(cuid())
    code      String   @unique
    name      String
    description String
    startingDate DateTime @default(now())
    durationInWeeks Int
    admin    User     @relation(fields: [adminId], references: [id], name: "admin")
    adminId   String
    students  User[]  @relation("students")
    courseTeacher  User  @relation(fields: [courseTeacherId], references: [id], name: "courseTeacher")
    courseTeacherId  String
    tpTeacher  User? @relation(fields: [tpTeacherId], references: [id], name: "tpTeacher")
    tpTeacherId  String?
    tdTeacher  User? @relation(fields: [tdTeacherId], references: [id], name: "tdTeacher")
    tdTeacherId  String?
    chapters  Chapter[]
}

model Chapter {
    id        String   @id @default(cuid())
    title      String
    description String
    course    Course   @relation(fields: [courseId], references: [id])
    courseId  String
    supports Support[]
}

model Support {
    id        String   @id @default(cuid())
    title      String
    description String?
    chapter    Chapter   @relation(fields: [chapterId], references: [id])
    chapterId  String
    fileType String
    fileUrl String
    isPublic Boolean @default(true)
    publishedAt DateTime?
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    role    Role @default(STUDENT)
    courses Course[] @relation("students")
    courseTeacher Course[] @relation("courseTeacher")
    tpTeacher Course[] @relation("tpTeacher")
    tdTeacher Course[] @relation("tdTeacher")
    managedCourses Course[] @relation("admin")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Role {
    ADMIN
    STUDENT
    TEACHER
}

